{"ast":null,"code":"var _jsxFileName = \"/Users/kiahakala/Documents/awesome-cats/frontend/src/components/CatForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { Form, json, redirect, useActionData, useNavigate, useNavigation } from 'react-router-dom';\nimport classes from './CatForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CatForm(_ref) {\n  _s();\n  let {\n    method,\n    cat\n  } = _ref;\n  const data = useActionData();\n  const navigate = useNavigate();\n  const navigation = useNavigation();\n  const [likes, setLikes] = useState(0);\n  const isSubmitting = navigation.state === 'submitting';\n  function cancelHandler() {\n    navigate('..');\n  }\n  function pawHandler() {\n    cat.likes = likes + 1;\n    setLikes(cat.likes);\n  }\n\n  //console.log(cat.likes)\n\n  // To display backend errors: \n  // 1. check if data is sent\n  // 2. check if data includes errors object\n  // 3. loop through keys in errors object and map the data stored in the keys\n\n  // Input names must be set to use Router Form!\n  return /*#__PURE__*/_jsxDEV(Form, {\n    method: method,\n    className: classes.form,\n    children: [data && data.errors && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.values(data.errors).map(err => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: err\n      }, err, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"title\",\n        type: \"text\",\n        name: \"title\",\n        required: true,\n        defaultValue: cat ? cat.title : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"image\",\n        children: \"Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"image\",\n        type: \"url\",\n        name: \"image\",\n        required: true,\n        defaultValue: cat ? cat.image : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"date\",\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"date\",\n        type: \"date\",\n        name: \"date\",\n        required: true,\n        defaultValue: cat ? cat.date : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"description\",\n        name: \"description\",\n        rows: \"5\",\n        required: true,\n        defaultValue: cat ? cat.description : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        name: \"likes\",\n        onClick: pawHandler,\n        defaultValue: cat ? cat.likes : 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: cancelHandler,\n        disabled: isSubmitting,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: isSubmitting,\n        children: isSubmitting ? 'Submitting...' : 'Save'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 3\n  }, this);\n}\n_s(CatForm, \"6iNuI8NFCuboTLsoSy93zwvRxgw=\", false, function () {\n  return [useActionData, useNavigate, useNavigation];\n});\n_c = CatForm;\nexport default CatForm;\nexport async function action(_ref2) {\n  let {\n    request,\n    params\n  } = _ref2;\n  const method = request.method;\n  const data = await request.formData();\n  const catData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description'),\n    likes: data.get('likes')\n  };\n  let url = 'http://localhost:8080/cats';\n  if (method === 'PATCH') {\n    const catId = params.catId;\n    url = 'http://localhost:8080/cats/' + catId;\n  }\n  const response = await fetch(url, {\n    method: method,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(catData)\n  });\n\n  // Status code from the backend\n  if (response.status === 422) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: 'Could not save cat'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/cats');\n}\nvar _c;\n$RefreshReg$(_c, \"CatForm\");","map":{"version":3,"names":["useState","Form","json","redirect","useActionData","useNavigate","useNavigation","classes","CatForm","method","cat","data","navigate","navigation","likes","setLikes","isSubmitting","state","cancelHandler","pawHandler","form","errors","Object","values","map","err","title","image","date","description","actions","action","request","params","formData","catData","get","url","catId","response","fetch","headers","body","JSON","stringify","status","ok","message"],"sources":["/Users/kiahakala/Documents/awesome-cats/frontend/src/components/CatForm.js"],"sourcesContent":["import { useState } from 'react'\n\nimport { \n\tForm, \n\tjson, \n\tredirect,\n\tuseActionData, \n\tuseNavigate, \n\tuseNavigation \n} from 'react-router-dom'\nimport classes from './CatForm.module.css'\n\nfunction CatForm({ method, cat }) {\n\tconst data = useActionData()\n\tconst navigate = useNavigate()\n\tconst navigation = useNavigation()\n\n\tconst [likes, setLikes] = useState(0)\n\n\tconst isSubmitting = navigation.state === 'submitting'\n\n\tfunction cancelHandler() {\n\t\tnavigate('..')\n\t}\n\n\tfunction pawHandler() {\n\t\tcat.likes = likes + 1\n\t\tsetLikes(cat.likes)\n\t}\n\n\t//console.log(cat.likes)\n\n\t// To display backend errors: \n\t// 1. check if data is sent\n\t// 2. check if data includes errors object\n\t// 3. loop through keys in errors object and map the data stored in the keys\n\n\t// Input names must be set to use Router Form!\n\treturn (\n\t\t<Form method={method} className={classes.form}>\n\t\t\t{data && data.errors && <ul>\n\t\t\t\t{Object.values(data.errors).map((err) => (\n\t\t\t\t\t<li key={err}>{err}</li>\n\t\t\t\t))}\n\t\t\t\t</ul>}\n\t\t\t<p>\n\t\t\t\t<label htmlFor='title'>Title</label>\n\t\t\t\t<input \n\t\t\t\t\tid='title' \n\t\t\t\t\ttype='text' \n\t\t\t\t\tname='title' \n\t\t\t\t\trequired \n\t\t\t\t\tdefaultValue={cat ? cat.title : ''}\n\t\t\t\t\t/>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label htmlFor='image'>Image</label>\n\t\t\t\t<input \n\t\t\t\t\tid='image' \n\t\t\t\t\ttype='url' \n\t\t\t\t\tname='image' \n\t\t\t\t\trequired \n\t\t\t\t\tdefaultValue={cat ? cat.image : ''}\n\t\t\t\t/>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label htmlFor='date'>Date</label>\n\t\t\t\t<input \n\t\t\t\t\tid='date' \n\t\t\t\t\ttype='date' \n\t\t\t\t\tname='date' \n\t\t\t\t\trequired \n\t\t\t\t\tdefaultValue={cat ? cat.date : ''}\n\t\t\t\t/>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label htmlFor='description'>Description</label>\n\t\t\t\t<input \n\t\t\t\t\tid='description' \n\t\t\t\t\tname='description' \n\t\t\t\t\trows='5'\n\t\t\t\t\trequired \n\t\t\t\t\tdefaultValue={cat ? cat.description : ''}\n\t\t\t\t/>\n\t\t\t</p>\n\t\t\t<div className={classes.actions}>\n\t\t\t\t<button type='button' name='likes' onClick={pawHandler} defaultValue={cat ? cat.likes : 0}></button>\n\t\t\t\t<button type=\"button\" onClick={cancelHandler} disabled={isSubmitting}>\n\t\t\t\tCancel\n\t\t\t\t</button>\n\t\t\t\t<button disabled={isSubmitting}>\n\t\t\t\t{isSubmitting ? 'Submitting...' : 'Save'}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</Form>\n\t)\n}\n\nexport default CatForm\n\nexport async function action({ request, params }) {\n\tconst method = request.method\n\tconst data = await request.formData()\n\n\tconst catData = {\n\t\ttitle: data.get('title'),\n\t\timage: data.get('image'),\n\t\tdate: data.get('date'),\n\t\tdescription: data.get('description'),\n\t\tlikes: data.get('likes')\n\t}\n\n\tlet url = 'http://localhost:8080/cats'\n\n\tif (method === 'PATCH') {\n\t\tconst catId = params.catId\n\t\turl = 'http://localhost:8080/cats/' + catId\n\t}\n\n\tconst response = await fetch(url, {\n\t\tmethod: method,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(catData),\n\t})\n\n\t// Status code from the backend\n\tif (response.status === 422) {\n\t\treturn response\n\t}\n\n\tif (!response.ok) {\n\t\tthrow json({ message: 'Could not save cat' }, { status: 500 })\n\t}\n\treturn redirect('/cats')\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}